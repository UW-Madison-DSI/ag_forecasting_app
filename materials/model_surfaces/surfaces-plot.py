# -*- coding: utf-8 -*-
"""frogeye.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13afxmqxwdhOM16iVAZQEdu8388n152hg
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import pandas as pd

import matplotlib.pyplot as plt
import mpld3

def logistic_f(logit):
    """
    Logistic function to convert logit to probability.

    Args:
        logit (float or numpy.ndarray): Logit value

    Returns:
        float or numpy.ndarray: Probability value
    """
    return np.exp(logit) / (1 + np.exp(logit))

!pip install mpld3

def plot_risk_surfaces():
    """
    Generate surface plots for all disease risk models
    """
    # Set up figure with subplots
    fig = plt.figure(figsize=(20, 25))

    # Tar Spot Risk Surface
    def tar_spot_surface():
        ax = fig.add_subplot(5, 2, 1, projection='3d')

        # Create grid
        meanAT_range = np.linspace(15, 35, 100)
        maxRH_range = np.linspace(60, 100, 100)
        meanAT_grid, maxRH_grid = np.meshgrid(meanAT_range, maxRH_range)

        # Calculate probabilities
        prob_grid = np.zeros_like(meanAT_grid)
        for i in range(meanAT_grid.shape[0]):
            for j in range(meanAT_grid.shape[1]):
                logit_LR4 = 32.06987 - (0.89471 * meanAT_grid[i,j]) - (0.14373 * maxRH_grid[i,j])
                logit_LR6 = 20.35950 - (0.91093 * meanAT_grid[i,j]) - (0.29240 * maxRH_grid[i,j])
                probabilities = [logistic_f(logit_LR4), logistic_f(logit_LR6)]
                prob_grid[i,j] = np.mean(probabilities)

        # 3D Surface
        surf = ax.plot_surface(meanAT_grid, maxRH_grid, prob_grid,
                                cmap=cm.viridis, alpha=0.8)
        ax.set_xlabel('Mean Air Temperature (°C)')
        ax.set_ylabel('Max Relative Humidity (%)')
        ax.set_zlabel('Tar Spot Risk Probability')
        ax.set_title('Tar Spot Risk Surface')
        fig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)

        # 2D Heatmap
        ax_heat = fig.add_subplot(5, 2, 2)
        contour = ax_heat.contourf(meanAT_grid, maxRH_grid, prob_grid,
                                   levels=20, cmap=cm.viridis)
        plt.colorbar(contour, ax=ax_heat, label='Tar Spot Risk Probability')
        ax_heat.set_xlabel('Mean Air Temperature (°C)')
        ax_heat.set_ylabel('Max Relative Humidity (%)')
        ax_heat.set_title('Tar Spot Risk Heatmap')

        # Contour lines
        contour_lines = ax_heat.contour(meanAT_grid, maxRH_grid, prob_grid,
                                        levels=[0.2, 0.35],
                                        colors='black',
                                        linestyles='dashed')
        ax_heat.clabel(contour_lines, inline=True, fontsize=8, fmt='%.2f')

    # Gray Leaf Spot Risk Surface
    def gray_leaf_spot_surface():
        ax = fig.add_subplot(5, 2, 3, projection='3d')

        # Create grid
        minAT21_range = np.linspace(15, 35, 100)
        minDP30_range = np.linspace(10, 30, 100)
        minAT21_grid, minDP30_grid = np.meshgrid(minAT21_range, minDP30_range)

        # Calculate probabilities
        prob_grid = logistic_f(-2.9467 - (0.03729 * minAT21_grid) + (0.6534 * minDP30_grid))

        # 3D Surface
        surf = ax.plot_surface(minAT21_grid, minDP30_grid, prob_grid,
                                cmap=cm.plasma, alpha=0.8)
        ax.set_xlabel('Min Air Temp at 21 days (°C)')
        ax.set_ylabel('Min Dew Point at 30 days')
        ax.set_zlabel('Gray Leaf Spot Risk Probability')
        ax.set_title('Gray Leaf Spot Risk Surface')
        fig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)

        # 2D Heatmap
        ax_heat = fig.add_subplot(5, 2, 4)
        contour = ax_heat.contourf(minAT21_grid, minDP30_grid, prob_grid,
                                   levels=20, cmap=cm.plasma)
        plt.colorbar(contour, ax=ax_heat, label='Gray Leaf Spot Risk Probability')
        ax_heat.set_xlabel('Min Air Temp at 21 days (°C)')
        ax_heat.set_ylabel('Min Dew Point at 30 days')
        ax_heat.set_title('Gray Leaf Spot Risk Heatmap')

        # Contour lines
        contour_lines = ax_heat.contour(minAT21_grid, minDP30_grid, prob_grid,
                                        levels=[0.2, 0.6],
                                        colors='black',
                                        linestyles='dashed')
        ax_heat.clabel(contour_lines, inline=True, fontsize=8, fmt='%.2f')

    # Non-Irrigated White Mold Risk Surface
    def non_irrigated_white_mold_surface():
        ax = fig.add_subplot(5, 2, 5, projection='3d')

        # Create grid
        maxAT30MA_range = np.linspace(20, 40, 100)
        maxWS30MA_range = np.linspace(0, 20, 100)
        maxAT30MA_grid, maxWS30MA_grid = np.meshgrid(maxAT30MA_range, maxWS30MA_range)

        # Calculate probabilities
        logit_nirr = (-0.47 * maxAT30MA_grid) - (1.01 * maxWS30MA_grid) + 16.65
        prob_grid = logistic_f(logit_nirr)

        # 3D Surface
        surf = ax.plot_surface(maxAT30MA_grid, maxWS30MA_grid, prob_grid,
                                cmap=cm.YlOrRd, alpha=0.8)
        ax.set_xlabel('Max Air Temp at 30 days (°C)')
        ax.set_ylabel('Max Wind Speed at 30 days')
        ax.set_zlabel('Non-Irrigated White Mold Risk')
        ax.set_title('Non-Irrigated White Mold Risk Surface')
        fig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)

        # 2D Heatmap
        ax_heat = fig.add_subplot(5, 2, 6)
        contour = ax_heat.contourf(maxAT30MA_grid, maxWS30MA_grid, prob_grid,
                                   levels=20, cmap=cm.YlOrRd)
        plt.colorbar(contour, ax=ax_heat, label='Non-Irrigated White Mold Risk')
        ax_heat.set_xlabel('Max Air Temp at 30 days (°C)')
        ax_heat.set_ylabel('Max Wind Speed at 30 days')
        ax_heat.set_title('Non-Irrigated White Mold Risk Heatmap')

    # Irrigated White Mold Risk Surface
    def irrigated_white_mold_surface():
        ax1 = fig.add_subplot(5, 2, 7, projection='3d')
        ax2 = fig.add_subplot(5, 2, 8, projection='3d')

        # Create grid
        maxAT30MA_range = np.linspace(0, 40, 100)
        maxRH30MA_range = np.linspace(60, 100, 100)
        maxAT30MA_grid, maxRH30MA_grid = np.meshgrid(maxAT30MA_range, maxRH30MA_range)

        # Calculate probabilities for 30-inch irrigation
        logit_irr_30 = (-2.38 * 1) + (0.65 * maxAT30MA_grid) + (0.38 * maxRH30MA_grid) - 52.65
        prob_grid_30 = logistic_f(logit_irr_30)

        # Calculate probabilities for 15-inch irrigation
        logit_irr_15 = (-2.38 * 0) + (0.65 * maxAT30MA_grid) + (0.38 * maxRH30MA_grid) - 52.65
        prob_grid_15 = logistic_f(logit_irr_15)

        # 3D Surface for 30-inch irrigation
        surf1 = ax1.plot_surface(maxAT30MA_grid, maxRH30MA_grid, prob_grid_30,
                                 cmap=cm.cool, alpha=0.8)
        ax1.set_xlabel('Max Air Temp at 30 days (°C)')
        ax1.set_ylabel('Max Relative Humidity at 30 days (%)')
        ax1.set_zlabel('Irrigated White Mold Risk (30-inch)')
        ax1.set_title('Irrigated White Mold Risk Surface (30-inch)')
        fig.colorbar(surf1, ax=ax1, shrink=0.5, aspect=5)

        # 3D Surface for 15-inch irrigation
        surf2 = ax2.plot_surface(maxAT30MA_grid, maxRH30MA_grid, prob_grid_15,
                                 cmap=cm.cool, alpha=0.8)
        ax2.set_xlabel('Max Air Temp at 30 days (°C)')
        ax2.set_ylabel('Max Relative Humidity at 30 days (%)')
        ax2.set_zlabel('Irrigated White Mold Risk (15-inch)')
        ax2.set_title('Irrigated White Mold Risk Surface (15-inch)')
        fig.colorbar(surf2, ax=ax2, shrink=0.5, aspect=5)

    # Frogeye Leaf Spot Risk Surface
    def frogeye_leaf_spot_surface():
        ax = fig.add_subplot(5, 2, 9, projection='3d')

        # Create grid
        maxAT30_range = np.linspace(20, 40, 100)
        rh80tot30_range = np.linspace(50, 200, 100)
        maxAT30_grid, rh80tot30_grid = np.meshgrid(maxAT30_range, rh80tot30_range)

        # Calculate probabilities
        logit_fe = -5.92485 + (0.1220 * maxAT30_grid) + (0.1732 * rh80tot30_grid)
        prob_grid = logistic_f(logit_fe)

        # 3D Surface
        surf = ax.plot_surface(maxAT30_grid, rh80tot30_grid, prob_grid,
                                cmap=cm.coolwarm, alpha=0.8)
        ax.set_xlabel('Max Air Temp at 30 days (°C)')
        ax.set_ylabel('RH80 Total at 30 days')
        ax.set_zlabel('Frogeye Leaf Spot Risk Probability')
        ax.set_title('Frogeye Leaf Spot Risk Surface')
        fig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)

        # 2D Heatmap
        ax_heat = fig.add_subplot(5, 2, 10)
        contour = ax_heat.contourf(maxAT30_grid, rh80tot30_grid, prob_grid,
                                   levels=20, cmap=cm.coolwarm)
        plt.colorbar(contour, ax=ax_heat, label='Frogeye Leaf Spot Risk Probability')
        ax_heat.set_xlabel('Max Air Temp at 30 days (°C)')
        ax_heat.set_ylabel('RH80 Total at 30 days')
        ax_heat.set_title('Frogeye Leaf Spot Risk Heatmap')

        # Contour lines
        contour_lines = ax_heat.contour(maxAT30_grid, rh80tot30_grid, prob_grid,
                                        levels=[0.5, 0.6],
                                        colors='black',
                                        linestyles='dashed')
        ax_heat.clabel(contour_lines, inline=True, fontsize=8, fmt='%.2f')

    # Generate all surfaces
    tar_spot_surface()
    gray_leaf_spot_surface()
    non_irrigated_white_mold_surface()
    irrigated_white_mold_surface()
    frogeye_leaf_spot_surface()

    # Adjust layout and display
    plt.tight_layout()
    plt.show()

# Run the plotting function
if __name__ == "__main__":
    plot_risk_surfaces()

import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
import mpld3

# Define the logistic function
def logistic_f(x):
    return 1 / (1 + np.exp(-x))

def plot_risk_surfaces():
    """
    Generate surface plots for all disease risk models and export to HTML.
    """
    # Create the main figure
    fig = plt.figure(figsize=(20, 25))

    # Tar Spot Risk Surface
    def tar_spot_surface():
        ax = fig.add_subplot(5, 2, 1, projection='3d')

        # Create grid
        meanAT_range = np.linspace(15, 35, 100)
        maxRH_range = np.linspace(60, 100, 100)
        meanAT_grid, maxRH_grid = np.meshgrid(meanAT_range, maxRH_range)

        # Calculate probabilities
        prob_grid = np.zeros_like(meanAT_grid)
        for i in range(meanAT_grid.shape[0]):
            for j in range(meanAT_grid.shape[1]):
                logit_LR4 = 32.06987 - (0.89471 * meanAT_grid[i, j]) - (0.14373 * maxRH_grid[i, j])
                logit_LR6 = 20.35950 - (0.91093 * meanAT_grid[i, j]) - (0.29240 * maxRH_grid[i, j])
                probabilities = [logistic_f(logit_LR4), logistic_f(logit_LR6)]
                prob_grid[i, j] = np.mean(probabilities)

        # 3D Surface
        surf = ax.plot_surface(meanAT_grid, maxRH_grid, prob_grid,
                               cmap=cm.viridis, alpha=0.8)
        ax.set_xlabel('Mean Air Temperature (°C)')
        ax.set_ylabel('Max Relative Humidity (%)')
        ax.set_zlabel('Tar Spot Risk Probability')
        ax.set_title('Tar Spot Risk Surface')
        fig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)

        # 2D Heatmap
        ax_heat = fig.add_subplot(5, 2, 2)
        contour = ax_heat.contourf(meanAT_grid, maxRH_grid, prob_grid,
                                   levels=20, cmap=cm.viridis)
        plt.colorbar(contour, ax=ax_heat, label='Tar Spot Risk Probability')
        ax_heat.set_xlabel('Mean Air Temperature (°C)')
        ax_heat.set_ylabel('Max Relative Humidity (%)')
        ax_heat.set_title('Tar Spot Risk Heatmap')

        # Contour lines
        contour_lines = ax_heat.contour(meanAT_grid, maxRH_grid, prob_grid,
                                        levels=[0.2, 0.35],
                                        colors='black',
                                        linestyles='dashed')
        ax_heat.clabel(contour_lines, inline=True, fontsize=8, fmt='%.2f')

    # Gray Leaf Spot Risk Surface
    def gray_leaf_spot_surface():
        ax = fig.add_subplot(5, 2, 3, projection='3d')

        # Create grid
        minAT21_range = np.linspace(15, 35, 100)
        minDP30_range = np.linspace(10, 30, 100)
        minAT21_grid, minDP30_grid = np.meshgrid(minAT21_range, minDP30_range)

        # Calculate probabilities
        prob_grid = logistic_f(-2.9467 - (0.03729 * minAT21_grid) + (0.6534 * minDP30_grid))

        # 3D Surface
        surf = ax.plot_surface(minAT21_grid, minDP30_grid, prob_grid,
                               cmap=cm.plasma, alpha=0.8)
        ax.set_xlabel('Min Air Temp at 21 days (°C)')
        ax.set_ylabel('Min Dew Point at 30 days')
        ax.set_zlabel('Gray Leaf Spot Risk Probability')
        ax.set_title('Gray Leaf Spot Risk Surface')
        fig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)

        # 2D Heatmap
        ax_heat = fig.add_subplot(5, 2, 4)
        contour = ax_heat.contourf(minAT21_grid, minDP30_grid, prob_grid,
                                   levels=20, cmap=cm.plasma)
        plt.colorbar(contour, ax=ax_heat, label='Gray Leaf Spot Risk Probability')
        ax_heat.set_xlabel('Min Air Temp at 21 days (°C)')
        ax_heat.set_ylabel('Min Dew Point at 30 days')
        ax_heat.set_title('Gray Leaf Spot Risk Heatmap')

        # Contour lines
        contour_lines = ax_heat.contour(minAT21_grid, minDP30_grid, prob_grid,
                                        levels=[0.2, 0.6],
                                        colors='black',
                                        linestyles='dashed')
        ax_heat.clabel(contour_lines, inline=True, fontsize=8, fmt='%.2f')

    # Non-Irrigated White Mold Risk Surface
    def non_irrigated_white_mold_surface():
        ax = fig.add_subplot(5, 2, 5, projection='3d')

        # Create grid
        maxAT30MA_range = np.linspace(20, 40, 100)
        maxWS30MA_range = np.linspace(0, 20, 100)
        maxAT30MA_grid, maxWS30MA_grid = np.meshgrid(maxAT30MA_range, maxWS30MA_range)

        # Calculate probabilities
        logit_nirr = (-0.47 * maxAT30MA_grid) - (1.01 * maxWS30MA_grid) + 16.65
        prob_grid = logistic_f(logit_nirr)

        # 3D Surface
        surf = ax.plot_surface(maxAT30MA_grid, maxWS30MA_grid, prob_grid,
                               cmap=cm.YlOrRd, alpha=0.8)
        ax.set_xlabel('Max Air Temp at 30 days (°C)')
        ax.set_ylabel('Max Wind Speed at 30 days')
        ax.set_zlabel('Non-Irrigated White Mold Risk')
        ax.set_title('Non-Irrigated White Mold Risk Surface')
        fig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)

        # 2D Heatmap
        ax_heat = fig.add_subplot(5, 2, 6)
        contour = ax_heat.contourf(maxAT30MA_grid, maxWS30MA_grid, prob_grid,
                                   levels=20, cmap=cm.YlOrRd)
        plt.colorbar(contour, ax=ax_heat, label='Non-Irrigated White Mold Risk')
        ax_heat.set_xlabel('Max Air Temp at 30 days (°C)')
        ax_heat.set_ylabel('Max Wind Speed at 30 days')
        ax_heat.set_title('Non-Irrigated White Mold Risk Heatmap')

    # Irrigated White Mold Risk Surface
    def irrigated_white_mold_surface():
        ax1 = fig.add_subplot(5, 2, 7, projection='3d')
        ax2 = fig.add_subplot(5, 2, 8, projection='3d')

        # Create grid
        maxAT30MA_range = np.linspace(0, 40, 100)
        maxRH30MA_range = np.linspace(60, 100, 100)
        maxAT30MA_grid, maxRH30MA_grid = np.meshgrid(maxAT30MA_range, maxRH30MA_range)

        # Calculate probabilities for 30-inch irrigation
        logit_irr_30 = (-2.38 * 1) + (0.65 * maxAT30MA_grid) + (0.38 * maxRH30MA_grid) - 52.65
        prob_grid_30 = logistic_f(logit_irr_30)

        # Calculate probabilities for 15-inch irrigation
        logit_irr_15 = (-2.38 * 0) + (0.65 * maxAT30MA_grid) + (0.38 * maxRH30MA_grid) - 52.65
        prob_grid_15 = logistic_f(logit_irr_15)

        # 3D Surface for 30-inch irrigation
        surf1 = ax1.plot_surface(maxAT30MA_grid, maxRH30MA_grid, prob_grid_30,
                                 cmap=cm.cool, alpha=0.8)
        ax1.set_xlabel('Max Air Temp at 30 days (°C)')
        ax1.set_ylabel('Max Relative Humidity at 30 days (%)')
        ax1.set_zlabel('Irrigated White Mold Risk (30-inch)')
        ax1.set_title('Irrigated White Mold Risk Surface (30-inch)')
        fig.colorbar(surf1, ax=ax1, shrink=0.5, aspect=5)

        # 3D Surface for 15-inch irrigation
        surf2 = ax2.plot_surface(maxAT30MA_grid, maxRH30MA_grid, prob_grid_15,
                                 cmap=cm.cool, alpha=0.8)
        ax2.set_xlabel('Max Air Temp at 30 days (°C)')
        ax2.set_ylabel('Max Relative Humidity at 30 days (%)')
        ax2.set_zlabel('Irrigated White Mold Risk (15-inch)')
        ax2.set_title('Irrigated White Mold Risk Surface (15-inch)')
        fig.colorbar(surf2, ax=ax2, shrink=0.5, aspect=5)

    # Frogeye Leaf Spot Risk Surface
    def frogeye_leaf_spot_surface():
        ax = fig.add_subplot(5, 2, 9, projection='3d')

        # Create grid
        maxAT30_range = np.linspace(20, 40, 100)
        rh80tot30_range = np.linspace(50, 200, 100)
        maxAT30_grid, rh80tot30_grid = np.meshgrid(maxAT30_range, rh80tot30_range)

        # Calculate probabilities
        logit_fe = -5.92485 + (0.1220 * maxAT30_grid) + (0.1732 * rh80tot30_grid)
        prob_grid = logistic_f(logit_fe)

        # 3D Surface
        surf = ax.plot_surface(maxAT30_grid, rh80tot30_grid, prob_grid,
                               cmap=cm.coolwarm, alpha=0.8)
        ax.set_xlabel('Max Air Temp at 30 days (°C)')
        ax.set_ylabel('RH80 Total at 30 days')
        ax.set_zlabel('Frogeye Leaf Spot Risk Probability')
        ax.set_title('Frogeye Leaf Spot Risk Surface')
        fig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)

        # 2D Heatmap
        ax_heat = fig.add_subplot(5, 2, 10)
        contour = ax_heat.contourf(maxAT30_grid, rh80tot30_grid, prob_grid,
                                   levels=20, cmap=cm.coolwarm)
        plt.colorbar(contour, ax=ax_heat, label='Frogeye Leaf Spot Risk Probability')
        ax_heat.set_xlabel('Max Air Temp at 30 days (°C)')
        ax_heat.set_ylabel('RH80 Total at 30 days')
        ax_heat.set_title('Frogeye Leaf Spot Risk Heatmap')

        # Contour lines
        contour_lines = ax_heat.contour(maxAT30_grid, rh80tot30_grid, prob_grid,
                                        levels=[0.5, 0.6],
                                        colors='black',
                                        linestyles='dashed')
        ax_heat.clabel(contour_lines, inline=True, fontsize=8, fmt='%.2f')

    # Generate all surfaces
    tar_spot_surface()
    gray_leaf_spot_surface()
    non_irrigated_white_mold_surface()
    irrigated_white_mold_surface()
    frogeye_leaf_spot_surface()

    # Adjust the layout
    plt.tight_layout()

    # Convert the figure to an HTML string using the figure object
    html_str = mpld3.fig_to_html(fig)

    # Save the HTML string to a file
    with open("risk_models.html", "w") as f:
        f.write(html_str)

    # Display the plot
    plt.show()

# Run the plotting function
if __name__ == "__main__":
    plot_risk_surfaces()

